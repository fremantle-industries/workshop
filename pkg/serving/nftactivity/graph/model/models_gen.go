// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type FloorGroup struct {
	Global *Price        `json:"global"`
	Venues []*VenuePrice `json:"venues"`
}

type Floors struct {
	Ask *FloorGroup `json:"ask"`
}

type GridItemTrait struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type PriceRange struct {
	Min float64 `json:"min"`
	Max float64 `json:"max"`
}

type RarityRange struct {
	Min int `json:"min"`
	Max int `json:"max"`
}

type TokenSet struct {
	Slug            string  `json:"slug"`
	CollectionID    string  `json:"collectionId"`
	ContractID      string  `json:"contractId"`
	Name            string  `json:"name"`
	Description     *string `json:"description"`
	Image           string  `json:"image"`
	Banner          string  `json:"banner"`
	DiscordURL      string  `json:"discordUrl"`
	ExternalURL     string  `json:"externalUrl"`
	TwitterUsername string  `json:"twitterUsername"`
	IsVerified      bool    `json:"isVerified"`
	TotalTokens     int     `json:"totalTokens"`
}

type TokenSetGridItemAsset struct {
	ItemID        string              `json:"itemId"`
	CollectionID  string              `json:"collectionId"`
	Contract      string              `json:"contract"`
	TokenID       string              `json:"tokenId"`
	Slug          string              `json:"slug"`
	Image         string              `json:"image"`
	IsFlagged     bool                `json:"isFlagged"`
	RarityRank    int                 `json:"rarityRank"`
	Valuation     *AssetValuation     `json:"valuation"`
	Marketability *AssetMarketability `json:"marketability"`
}

type TokenSetItem struct {
	ItemID        string              `json:"itemId"`
	CollectionID  string              `json:"collectionId"`
	Contract      string              `json:"contract"`
	TokenID       string              `json:"tokenId"`
	Slug          string              `json:"slug"`
	Image         string              `json:"image"`
	IsFlagged     bool                `json:"isFlagged"`
	RarityRank    int                 `json:"rarityRank"`
	Valuation     *AssetValuation     `json:"valuation"`
	Marketability *AssetMarketability `json:"marketability"`
}

type TokenSetItemsPriceRange struct {
	Min float64 `json:"min"`
	Max float64 `json:"max"`
}

type TokenSetItemsRarityRange struct {
	Min int `json:"min"`
	Max int `json:"max"`
}

type TokenSetItemsTrait struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

type TokenSetStat struct {
	Slug                      string   `json:"slug"`
	Name                      string   `json:"name"`
	Floor                     *float64 `json:"floor"`
	Floor24hDelta             *float64 `json:"floor24hDelta"`
	Volume24h                 *float64 `json:"volume24h"`
	Volume24hDelta            *float64 `json:"volume24hDelta"`
	ListingPercentage24hDelta *float64 `json:"listingPercentage24hDelta"`
}

type TokenSetTradeActivity struct {
	Floors  *Floors  `json:"floors"`
	Volumes *Volumes `json:"volumes"`
}

type VenueVolume struct {
	Name   string  `json:"name"`
	Volume *Volume `json:"volume"`
}

type Volume struct {
	Amount   float64 `json:"amount"`
	Currency string  `json:"currency"`
}

type VolumeGroup struct {
	Global *Volume        `json:"global"`
	Venues []*VenueVolume `json:"venues"`
}

type Volumes struct {
	Hr24  *VolumeGroup `json:"hr24"`
	Day7  *VolumeGroup `json:"day7"`
	Day30 *VolumeGroup `json:"day30"`
}

type GridItemSort string

const (
	GridItemSortBestValue       GridItemSort = "BEST_VALUE"
	GridItemSortPriceHighToLow  GridItemSort = "PRICE_HIGH_TO_LOW"
	GridItemSortPriceLowToHigh  GridItemSort = "PRICE_LOW_TO_HIGH"
	GridItemSortHighestLastSale GridItemSort = "HIGHEST_LAST_SALE"
)

var AllGridItemSort = []GridItemSort{
	GridItemSortBestValue,
	GridItemSortPriceHighToLow,
	GridItemSortPriceLowToHigh,
	GridItemSortHighestLastSale,
}

func (e GridItemSort) IsValid() bool {
	switch e {
	case GridItemSortBestValue, GridItemSortPriceHighToLow, GridItemSortPriceLowToHigh, GridItemSortHighestLastSale:
		return true
	}
	return false
}

func (e GridItemSort) String() string {
	return string(e)
}

func (e *GridItemSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GridItemSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GridItemSort", str)
	}
	return nil
}

func (e GridItemSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TokenSetItemsSort string

const (
	TokenSetItemsSortBestValue       TokenSetItemsSort = "BEST_VALUE"
	TokenSetItemsSortPriceHighToLow  TokenSetItemsSort = "PRICE_HIGH_TO_LOW"
	TokenSetItemsSortPriceLowToHigh  TokenSetItemsSort = "PRICE_LOW_TO_HIGH"
	TokenSetItemsSortHighestLastSale TokenSetItemsSort = "HIGHEST_LAST_SALE"
)

var AllTokenSetItemsSort = []TokenSetItemsSort{
	TokenSetItemsSortBestValue,
	TokenSetItemsSortPriceHighToLow,
	TokenSetItemsSortPriceLowToHigh,
	TokenSetItemsSortHighestLastSale,
}

func (e TokenSetItemsSort) IsValid() bool {
	switch e {
	case TokenSetItemsSortBestValue, TokenSetItemsSortPriceHighToLow, TokenSetItemsSortPriceLowToHigh, TokenSetItemsSortHighestLastSale:
		return true
	}
	return false
}

func (e TokenSetItemsSort) String() string {
	return string(e)
}

func (e *TokenSetItemsSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TokenSetItemsSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TokenSetItemsSort", str)
	}
	return nil
}

func (e TokenSetItemsSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
